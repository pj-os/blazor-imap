@page "/emails"
@rendermode InteractiveServer
@using BlazorEmailApp.Models
@using BlazorEmailApp.Services
@inject EmailService EmailService
@inject NavigationManager Navigation
@inject ILogger<Emails> Logger

<PageTitle>Emails</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-gray-900">Emails</h1>
            <div class="flex gap-2">
                <button @onclick="RefreshEmails" disabled="@isRefreshing" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isRefreshing)
                    {
                        <span>Syncing...</span>
                    }
                    else
                    {
                        <span>Refresh</span>
                    }
                </button>
                <a href="/email-config" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500">
                    Configure Accounts
                </a>
            </div>
        </div>
        
        @if (emails == null)
        {
            <div class="text-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                <p class="mt-4 text-gray-600">Loading emails...</p>
            </div>
        }
        else if (!emails.Any())
        {
            <div class="text-center py-12">
                <div class="text-gray-400 mb-4">
                    <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No emails found</h3>
                <p class="text-gray-600 mb-4">You haven't synced any emails yet.</p>
                <a href="/email-config" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Configure Email Accounts
                </a>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow-md">
                <div class="p-4 border-b border-gray-200">
                                            <div class="flex justify-between items-center">
                            <div class="flex items-center gap-4">
                                <span class="text-sm text-gray-600">@(totalEmails) emails</span>
                            <div class="flex items-center gap-2">
                                <label class="text-sm text-gray-600">Filter:</label>
                                <select @onchange="OnFilterChange" class="text-sm border border-gray-300 rounded px-2 py-1">
                                    <option value="all">All</option>
                                    <option value="unread">Unread</option>
                                    <option value="read">Read</option>
                                </select>
                            </div>
                        </div>

                    </div>
                </div>
                
                <div class="divide-y divide-gray-200">
                    @foreach (var email in emails)
                    {
                        <div class="p-4 hover:bg-gray-50 cursor-pointer @(email.IsRead ? "" : "bg-blue-50")" @onclick="() => ViewEmail(email.Id)">
                            <div class="flex justify-between items-start">
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center gap-2 mb-1">
                                        <span class="font-medium text-gray-900 @(email.IsRead ? "" : "font-semibold")">
                                            @(string.IsNullOrEmpty(email.From) ? "Unknown" : email.From)
                                        </span>
                                        @if (!email.IsRead)
                                        {
                                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                New
                                            </span>
                                        }
                                        @if (email.HasAttachments)
                                        {
                                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                ðŸ“Ž
                                            </span>
                                        }
                                    </div>
                                    <h3 class="text-sm font-medium text-gray-900 @(email.IsRead ? "" : "font-semibold") mb-1">
                                        @(string.IsNullOrEmpty(email.Subject) ? "(No Subject)" : email.Subject)
                                    </h3>
                                    @if (!string.IsNullOrEmpty(email.Snippet))
                                    {
                                        <p class="text-sm text-gray-600 truncate">@email.Snippet</p>
                                    }
                                </div>
                                <div class="flex flex-col items-end gap-1 ml-4">
                                    <span class="text-xs text-gray-500">
                                        @email.ReceivedDate.ToString("MMM dd")
                                    </span>
                                    <span class="text-xs text-gray-500">
                                        @email.ReceivedDate.ToString("HH:mm")
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                @if (totalPages > 1)
                {
                    <div class="p-4 border-t border-gray-200">
                        <div class="flex justify-between items-center">
                            <div class="text-sm text-gray-600">
                                Page @currentPage of @totalPages
                            </div>
                            <div class="flex gap-2">
                                <button @onclick="() => ChangePage(currentPage - 1)" 
                                        disabled="@(currentPage <= 1)"
                                        class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Previous
                                </button>
                                <button @onclick="() => ChangePage(currentPage + 1)" 
                                        disabled="@(currentPage >= totalPages)"
                                        class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Email>? emails;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalEmails = 0;
    private string filter = "all";
    private bool isRefreshing = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEmails();
    }
    
    private async Task LoadEmails()
    {
        try
        {
            emails = await EmailService.GetEmailsAsync(null, currentPage, pageSize, filter);
            totalEmails = await EmailService.GetEmailsCountAsync(null, filter);
            totalPages = Math.Max(1, (int)Math.Ceiling((double)totalEmails / pageSize));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load emails");
        }
    }
    
    private async Task RefreshEmails()
    {
        if (isRefreshing) return;
        
        isRefreshing = true;
        StateHasChanged();
        
        try
        {
            // Get the first email account to sync from
            var accounts = await EmailService.GetEmailAccountsAsync();
            if (accounts.Any())
            {
                var account = accounts.First();
                var newEmailsCount = await EmailService.SyncEmailsAsync(account.Id, false); // Incremental sync
                
                if (newEmailsCount > 0)
                {
                    Logger.LogInformation("Synced {Count} new emails", newEmailsCount);
                }
            }
            
            // Reload the current page
            await LoadEmails();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh emails");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }
    
    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadEmails();
        }
    }
    
    private void ViewEmail(int emailId)
    {
        Navigation.NavigateTo($"/email/{emailId}");
    }
    
    private async Task OnFilterChange(ChangeEventArgs e)
    {
        filter = e.Value?.ToString() ?? "all";
        currentPage = 1;
        await LoadEmails();
    }
} 